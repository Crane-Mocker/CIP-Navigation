#################################################################################
######################### STATIC PATROL EXAMPLES ################################
#################################################################################
# The input defines four variables loaded into the simulator, 
# 0.  task = 'TASK_STATIC_PATROL'
#     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
#     This defines the task as "static-patrol"
#
# 1.  patrolPoints: 
#     ~~~~~~~~~~~~
#     - This is a list of all possible (x,y) points that 
#       would ever be travelled by any ship.
#     - The variable type is a list
#     - For example: 
#       patrolPoints = [(x0,y0), (x1,y1), ...]
#  
# 2.  paths:
#     ~~~~~
#     - This is a list of patrol-paths, one patrol path for each ship.
#     - The variable type is a list of paths, where each path is a 
#       list of (x,y) points, taken from patrolPoints.
#     - For example:
#       p = patrolPoints
#       paths = [ [p[0], p[5], p[3]], [p[3], p[7], p[11]], ... ]
#      
# 3.  shipInitialStates:
#     ~~~~~~~~~~~~~~~~~~~
#     - This is a list of the initial states of the ships. 
#     
#     
# Note: As this is a python file, it is possible to both insert data in the 
# simple format of the basic example, or using more sophisticated python commands.
#     
#####################################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#POINTS FOR THE BASIC EXAMPLE - WITH NO OBSTACLES - patrolling according to heuristicDivide
task = 'TASK_STATIC_PATROL'
# a list of patrol points
patrolPoints=[(300, 500), (750, 290), (1090, 655), (1390, 655), (1866, 505), (1866, 995), (1390, 845), (1090, 845), (750, 1210), (300, 1000)]
# patrol-paths a list of lists of points 
paths=[[(300, 500), (750, 290), (1090, 655), (1090, 845), (750, 1210), (300, 1000)], [(1090, 845), (750, 1210), (300, 1000), (300, 500), (750, 290), (1090, 655)], [(1390, 655), (1866, 505), (1866, 995), (1390, 845)]]
# ship start-positions: (x, y, orientation). Speed is assumed to be 0 but this can be changed in the future
shipInitialStates=[
  state.ShipExternalState(x=300, y=500, orientation=-25.016893478100023, speed=0, angularSpeed=0),
  state.ShipExternalState(x=1090.0, y=766.3268147502904, orientation=90.0, speed=0, angularSpeed=0),
  state.ShipExternalState(x=1390.0, y=655, orientation=-17.49, speed=0, angularSpeed=0)
]
# override sea model files as needed
waterFile = 'water_currents_basic_example.py'
# override default task output
resultsType = 'edgeGraphData'
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#   # POINTS FOR THE BASIC EXAMPLE - edge data collection
#   # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   task = 'TASK_STATIC_PATROL'
#   patrolPoints = [(300,500), (750,290), (1090,655), (1390,655), (1866,505), (1866,995), (1390,845), (1090,845), (750,1210), (300,1000)]
#   
#   path1 = patrolPoints
#   path2 = list(patrolPoints); path2.reverse()
#   path3 = [patrolPoints[2], patrolPoints[3], patrolPoints[6], patrolPoints[7]]
#   path4 = [patrolPoints[7], patrolPoints[6], patrolPoints[3], patrolPoints[2]]
#   paths = [path1, path2, path3, path4]
#   #paths =[ [(300,500), (750,290), (1090,655), (1390,655), (1866,505), (1866,995), (1390,845), (1090,845), (750,1210), (300,1000)],
#   #              [(1090,845), (750,1210), (300,1000), (300,500), (750,290), (1090,655), (1390,655), (1866,505), (1866,995), (1390,845)],
#   #              [(1866,505), (1866,995), (1390,845), (1090,845), (750,1210), (300,1000), (300,500), (750,290), (1090,655), (1390,655)]
#   
#   # define initial positions for ships - number of ships must equal 
#   # the number of paths
#   shipInitialStates = [ 
#     # 3 ships that start patrolling
#     state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0),
#     state.ShipExternalState(x=-100, y=0, orientation=0, speed=0, angularSpeed=0),
#     state.ShipExternalState(x=-200, y=0, orientation=0, speed=0, angularSpeed=0),
#     state.ShipExternalState(x=-300, y=0, orientation=0, speed=0, angularSpeed=0)
#   ]
#
#   # override sea model files as needed
#   waterFile = 'water_currents_basic_example.py'
#
#
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# POINTS FOR THE PARALLEL EDGES CONFIGURATION (AAAI 11 PAPER)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   task = 'TASK_STATIC_PATROL'
#   numPointsInHalfPath = 18 # should be even
#   parallelEdgePoints = [ (500 + i * 250, 500) for i in range(numPointsInHalfPath) ] + list(reversed([ (500 + i * 250, 1500) for i in range(numPointsInHalfPath) ]))
#   patrolPoints = parallelEdgePoints
#   
#   
#   # paths for learning in the parallel edge example
#   tmp = [[patrolPoints[2*i], patrolPoints[2*i+1], patrolPoints[-(2*i+1) - 1], patrolPoints[-2*i - 1]] for i in range(numPointsInHalfPath / 2)]
#   paths = tmp + [list(reversed(path)) for path in tmp] + [patrolPoints, list(reversed(patrolPoints))]
#   
#   
#   # Ships initial state
#   numShips = len(paths)
#   shipInitialStates = [state.ShipExternalState(0,0,0,0,0) for i in range(numShips)]
#   
#   # override sea model files as needed
#   waterFile = 'waterCurrents_parallel_edge_example.py'
#   
#   # we ignore rules of the sea in this case
#   rulesOfTheSea = False
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#   # POINTS FOR THE ISLAND EXAMPLE
#   # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   task = 'TASK_STATIC_PATROL'
#   islandPoints =  [(640 ,990), (1150,830), (1310,1130), (1240,1580), (1190,1960), (1400, 1740), (1640, 1580), (1860,1510), (2140, 1420), (2640, 1260), (2640, 1620), (2860, 1680), (3140, 1700), (3440, 1980), (3940, 1820), (4260, 1480), (4480, 1120), (4640, 720), (4960, 300), (5240, 640), (5200, 940), (4880, 1320), (4850, 1700), (4480, 2020), (4000, 2240), (3340, 2500), (2860, 2500), (2720, 2260), (2580, 2120), (2080, 2320), (1840,2290), (1540, 2300), (1240, 2500), (750, 2640), (480, 2140), (660, 1660)]
#   patrolPoints = islandPoints    
#
#
#   l1 = patrolPoints
#   l2 = list(l1); l2.reverse()
#   l3 = [patrolPoints[35], patrolPoints[3], patrolPoints[4], patrolPoints[34]]
#   l4 = list(l3); l4.reverse()
#   l5 = [patrolPoints[4], patrolPoints[5], patrolPoints[31], patrolPoints[32]]
#   l6 = list(l5); l6.reverse()
#   l7 = [patrolPoints[6], patrolPoints[7], patrolPoints[29], patrolPoints[30]]
#   l8 = list(l7); l8.reverse()
#   l9 = [patrolPoints[10], patrolPoints[11], patrolPoints[27], patrolPoints[28]]
#   l10 = list(l9); l10.reverse()
#   l11 = [patrolPoints[13], patrolPoints[14], patrolPoints[24], patrolPoints[25]]
#   l12 = list(l11); l12.reverse()
#   l13 = [patrolPoints[14], patrolPoints[15], patrolPoints[16], patrolPoints[21], patrolPoints[22], patrolPoints[23], patrolPoints[24], patrolPoints[25]]
#   l14 = list(l13); l14.reverse()
#   paths = [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14]
#
#
#   ## Ships initial state
#   numShips = len(paths)
#   x = 100#3800#2413
#   shipInitialStates = [state.ShipExternalState(-i*x,0,0,0,0) for i in range(numShips)]
#
#   # override sea model files as needed
#   waterFile = 'waterCurrents_island_example.py'
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#################################################################################
#########################     END OF:            ################################
######################### STATIC PATROL EXAMPLES ################################
#################################################################################




#######################################################################
######################### COORDINATED PATROL ##########################
#######################################################################
# The input defines four variables loaded into the simulator, 
# 0.  task = 'TASK_PATROL_WITH_ONLINE_ASSIGNMENT'
#     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
#     This defines the task as "online-heuristicDivide" - running 
#     the AAAI'11 algorithm for online coordinated patrol
#
# 1.  patrolPoints: 
#     ~~~~~~~~~~~~
#     - This is a list of all possible (x,y) points that 
#       would ever be travelled by any ship.
#     - The variable type is a list
#     - For example: 
#       patrolPoints = [(x0,y0), (x1,y1), ...]
#  
# 2.  edgeLengths:
#     ~~~~~~~~~~~
#     - Maps a list of edges to a list of time-travels over them
#     - The variable type is a map[((x1,y1), (x2,y2))]=[t1, t2, t3,...] 
#     - For example:
#       p = patrolPoints
#       paths = {(p1,p2): [10, 11, 12, 11], ....}
#      
# 3.  shipInitialStates:
#     ~~~~~~~~~~~~~~~~~~~
#     - Starting position of ships
#     
# 4.  roles:
#     ~~~~~~~~~~~~~~~~~~~
#     - In this task there are different 'roles':
#       - 'originalPatroller' is a ship that partols right from the start
#       - 'joinsLater' is a ship that joins in the middle of the patrol
#     
#     
# Note: As this is a python file, it is possible to both insert data in the 
# simple format of the basic example, or using more sophisticated python commands.
#     
#####################################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The basic 2 circle example with 3 ships
#   task = 'TASK_PATROL_WITH_ONLINE_ASSIGNMENT'
#   # override sea model files as needed
#   waterFile = 'water_currents_basic_example.py'
#   # override default task output
#   resultsType = 'visit_times'
#   # The following data was generated by a static patrol over all the edges. Possible
#   # improvement: gather it online
#   patrolPoints=[(300, 500), (750, 290), (1090, 655), (1390, 655), (1866, 505), (1866, 995), (1390, 845), (1090, 845), (750, 1210), (300, 1000)]
#   edgeLengths={((1390, 845), (1866, 995)): [146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146], ((300, 500), (750, 290)): [166, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147], ((750, 1210), (300, 1000)): [160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160], ((1090, 845), (1090, 655)): [96, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77, 97, 77], ((1090, 655), (750, 290)): [149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149], ((1866, 995), (1390, 845)): [159, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160], ((1390, 845), (1390, 655)): [75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84, 75, 84], ((1090, 655), (1390, 655)): [73, 74, 72, 71, 77, 72, 71, 72, 77, 71, 72, 77, 71, 72, 71, 77, 72, 71, 77, 72, 71, 72, 77, 71, 72, 77, 71, 72, 77, 71, 72, 71, 77, 72, 71, 77, 72, 71, 72, 77, 71, 72, 77, 71, 72, 71, 77, 72, 71, 77, 72, 71, 72, 77, 71, 72, 77, 71, 72, 71, 77, 72, 71, 77, 72, 71, 72, 77, 71, 72, 77, 71, 72, 71, 77, 72, 71, 77, 72, 71, 72, 77, 71, 72, 77, 71, 72, 77, 71, 72, 71, 77, 72, 71, 77, 72, 71], ((1866, 505), (1866, 995)): [150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150], ((300, 1000), (750, 1210)): [149, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147], ((1090, 845), (1390, 845)): [76, 76, 72, 72, 77, 73, 72, 73, 77, 72, 73, 77, 72, 73, 72, 77, 73, 72, 77, 73, 72, 73, 77, 72, 73, 77, 72, 73, 77, 72, 73, 72, 77, 73, 72, 77, 73, 72, 73, 77, 72, 73, 77, 72, 73, 72, 77, 73, 72, 77, 73, 72, 73, 77, 72, 73, 77, 72, 73, 72, 77, 73, 72, 77, 73, 72, 73, 77, 72, 73, 77, 72, 73, 72, 77, 73, 72, 77, 73, 72, 73, 77, 72, 73, 77, 72, 73, 77, 72, 73, 72, 77, 73, 72, 77, 73], ((1390, 655), (1390, 845)): [76, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82, 74, 82], ((300, 500), (300, 1000)): [150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151], ((1090, 845), (750, 1210)): [149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149], ((1866, 505), (1390, 655)): [161, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160], ((750, 1210), (1090, 845)): [147, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149], ((300, 1000), (300, 500)): [150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150], ((750, 290), (300, 500)): [161, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160], ((1090, 655), (1090, 845)): [98, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97, 78, 97], ((1390, 655), (1090, 655)): [474, 517, 511, 473, 512, 516, 473, 512, 516, 473, 512, 473, 516, 512, 473, 516, 512, 473, 512, 516, 473, 512, 516, 473, 512, 473, 516, 512, 473, 516, 512, 473, 516, 512, 473, 512, 516, 473, 512, 516, 473, 512, 473, 516, 512, 473, 516, 512, 473, 512, 516, 473, 512, 516, 473, 512, 473, 516, 512, 473, 516, 512, 473, 512, 516, 473, 512, 516, 473, 512, 473, 516, 512, 473, 516, 512, 473, 512, 516, 473, 512, 516, 473, 512, 473, 516, 512, 473, 516, 512, 473, 516, 512, 473], ((750, 290), (1090, 655)): [156, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148], ((1390, 845), (1090, 845)): [472, 513, 512, 472, 512, 513, 472, 512, 513, 472, 512, 472, 513, 512, 472, 513, 512, 472, 512, 513, 472, 512, 513, 472, 512, 472, 513, 512, 472, 513, 512, 472, 513, 512, 472, 512, 513, 472, 512, 513, 472, 512, 472, 513, 512, 472, 513, 512, 472, 512, 513, 472, 512, 513, 472, 512, 472, 513, 512, 472, 513, 512, 472, 512, 513, 472, 512, 513, 472, 512, 472, 513, 512, 472, 513, 512, 472, 512, 513, 472, 512, 513, 472, 512, 472, 513, 512, 472, 513, 512, 472, 513, 512, 472, 512], ((1866, 995), (1866, 505)): [150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151], ((1390, 655), (1866, 505)): [146, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145]}
#   shipInitialStates = [ 
#   # 3 ships that start patrolling
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0),
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0), 
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0), 
#   ]
#   # define roles for ships - must have the same length as shipInitialStates
#   roles = [
#   'originalPatroller',
#   'originalPatroller',
#   'originalPatroller',
#   ]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   # The 36 points task from AAAI'11 paper 
#   # (there is some computational overhead at start so the simulator seems like
#   # its frozen, but after a few seconds it starts simulation)
#   task = 'TASK_PATROL_WITH_ONLINE_ASSIGNMENT'
#   # override sea model files as needed
#   waterFile = 'waterCurrents_parallel_edge_example.py'
#   # override default task output
#   resultsType = 'visit_times'
#   # The following data was generated by a static patrol over all the edges. Possible
#   # improvement: gather it online
#   patrolPoints=[(500, 500), (750, 500), (1000, 500), (1250, 500), (1500, 500), (1750, 500), (2000, 500), (2250, 500), (2500, 500), (2750, 500), (3000, 500), (3250, 500), (3500, 500), (3750, 500), (4000, 500), (4250, 500), (4500, 500), (4750, 500), (4750, 1500), (4500, 1500), (4250, 1500), (4000, 1500), (3750, 1500), (3500, 1500), (3250, 1500), (3000, 1500), (2750, 1500), (2500, 1500), (2250, 1500), (2000, 1500), (1750, 1500), (1500, 1500), (1250, 1500), (1000, 1500), (750, 1500), (500, 1500)]
#   edgeLengths={((3000, 500), (2750, 500)): [230, 230, 230, 230, 230, 230, 230, 230, 230], ((2000, 500), (1750, 500)): [230, 230, 230, 230, 230, 230, 230, 230], ((3250, 500), (3250, 1500)): [344, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345], ((4000, 500), (4250, 500)): [92, 91, 89, 92, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91], ((4500, 1500), (4750, 1500)): [83, 94, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93], ((3750, 1500), (3500, 1500)): [106, 107, 106, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90], ((1000, 500), (1250, 500)): [94, 94, 92, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91], ((4000, 500), (4000, 1500)): [211, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209], ((1500, 1500), (1250, 1500)): [229, 229, 229, 229, 229, 229, 229, 229], ((1500, 500), (1500, 1500)): [344, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346], ((4250, 1500), (4500, 1500)): [230, 230, 230, 230, 230, 230, 230, 230, 230], ((2500, 500), (2750, 500)): [89, 100, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104], ((2500, 500), (2500, 1500)): [344, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348], ((1750, 1500), (1500, 1500)): [106, 107, 106, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104], ((1750, 500), (1750, 1500)): [199, 211, 212, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214], ((4000, 1500), (3750, 1500)): [234, 234, 234, 234, 234, 234, 234, 234, 234], ((750, 1500), (1000, 1500)): [200, 149, 149, 149, 149, 149, 149, 149, 149], ((2500, 1500), (2750, 1500)): [87, 93, 90, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95], ((4500, 1500), (4500, 500)): [215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215], ((3000, 500), (3250, 500)): [88, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91], ((2750, 1500), (3000, 1500)): [229, 229, 229, 229, 229, 229, 229, 229, 229], ((1250, 1500), (1500, 1500)): [227, 235, 235, 235, 235, 235, 235, 235, 235], ((1000, 1500), (750, 1500)): [230, 230, 230, 230, 230, 230, 230, 230], ((2000, 500), (2000, 1500)): [211, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209], ((3250, 1500), (3000, 1500)): [91, 90, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89], ((1000, 1500), (1250, 1500)): [98, 98, 102, 107, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108], ((3000, 1500), (2750, 1500)): [230, 230, 230, 230, 230, 230, 230, 230], ((4250, 500), (4250, 1500)): [385, 344, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345], ((2000, 1500), (2250, 1500)): [84, 105, 89, 108, 107, 109, 108, 107, 109, 108, 107, 109, 89, 108, 107, 109, 108, 107, 109, 108, 107, 109, 89, 108, 107, 109, 108, 107, 109, 108, 107, 109, 89, 108, 107, 109, 108, 107, 109, 108, 107, 109, 89, 108, 107, 109, 108, 107, 109, 108, 107, 109, 89, 108, 107, 109, 108, 107, 109, 108, 107, 109, 89, 108, 107, 109, 108, 107, 109, 108, 107, 109, 89, 108, 107, 109, 108, 107, 109, 108, 107, 89, 109, 108, 107, 109, 108], ((750, 500), (1000, 500)): [182, 167, 167, 167, 167, 167, 167, 167, 167], ((500, 1500), (500, 500)): [259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259], ((4750, 1500), (4750, 500)): [259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 258, 259, 259, 259], ((4250, 1500), (4000, 1500)): [109, 90, 90, 90, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 91, 90, 91, 91, 91, 91, 91, 91, 90, 91], ((2000, 1500), (1750, 1500)): [230, 230, 230, 230, 230, 230, 230, 230], ((4250, 500), (4000, 500)): [108, 109, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107, 109, 108, 107, 109, 108, 107, 109, 108, 103, 107], ((3750, 1500), (3750, 500)): [349, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348], ((3250, 500), (3500, 500)): [230, 230, 230, 230, 230, 230, 230, 230, 230], ((2750, 500), (2750, 1500)): [203, 212, 212, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214], ((1000, 1500), (1000, 500)): [347, 346, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345], ((2250, 500), (2500, 500)): [230, 230, 230, 230, 230, 230, 230, 230, 230], ((3750, 500), (3500, 500)): [96, 95, 94, 90, 93, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 90, 95], ((2500, 1500), (2500, 500)): [216, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213], ((2750, 1500), (2750, 500)): [356, 348, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346], ((3500, 1500), (3750, 1500)): [94, 94, 90, 93, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 93, 90, 95, 94], ((2000, 1500), (2000, 500)): [351, 350, 350, 348, 347, 346, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345], ((1500, 1500), (1500, 500)): [217, 214, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213], ((3750, 500), (4000, 500)): [229, 229, 229, 229, 229, 229, 229, 229, 229], ((2500, 500), (2250, 500)): [229, 229, 229, 229, 229, 229, 229, 229], ((4250, 1500), (4250, 500)): [213, 208, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209], ((2750, 1500), (2500, 1500)): [105, 107, 106, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104], ((1750, 1500), (1750, 500)): [360, 348, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346], ((1250, 500), (1500, 500)): [226, 234, 234, 234, 234, 234, 234, 234, 234], ((4500, 500), (4750, 500)): [90, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101], ((3250, 1500), (3500, 1500)): [230, 230, 230, 230, 230, 230, 230, 230, 230], ((4750, 500), (4500, 500)): [95, 98, 97, 94, 98, 98, 97, 98, 98, 97, 98, 94, 98, 97, 98, 98, 97, 98, 98, 94, 97, 98, 98, 97, 98, 98, 97, 94, 98, 98, 97, 98, 98, 97, 98, 94, 98, 97, 98, 98, 97, 98, 98, 97, 94, 98, 98, 97, 98, 98, 97, 98, 94, 98, 97, 98, 98, 97, 98, 98, 94, 97, 98, 98, 97, 98, 98, 97, 94, 98, 98], ((1750, 1500), (2000, 1500)): [229, 229, 229, 229, 229, 229, 229, 229, 229], ((2250, 1500), (2250, 500)): [204, 208, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208], ((4000, 500), (3750, 500)): [235, 235, 235, 235, 235, 235, 235, 235, 235], ((2250, 1500), (2000, 1500)): [90, 90, 89, 90, 90, 89, 90, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91], ((3500, 500), (3500, 1500)): [345, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346, 346, 348, 346], ((3000, 500), (3000, 1500)): [213, 209, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208], ((500, 1500), (750, 1500)): [95, 95, 99, 98, 98, 97, 98, 98, 97, 94, 98, 98, 97, 98, 98, 97, 98, 94, 98, 97, 98, 98, 97, 98, 98, 94, 97, 98, 98, 97, 98, 98, 97, 94, 98, 98, 97, 98, 98, 97, 98, 94, 98, 97, 98, 98, 97, 98, 98, 97, 94, 98, 98, 97, 98, 98, 97, 98, 94, 98, 97, 98, 98, 97, 98, 98, 94, 97, 98, 98, 97, 98], ((3750, 500), (3750, 1500)): [199, 211, 212, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214], ((4250, 500), (4500, 500)): [230, 230, 230, 230, 230, 230, 230, 230, 230], ((750, 1500), (500, 1500)): [113, 99, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101, 101, 101, 101, 90, 101, 101, 101, 101, 101, 101], ((4750, 1500), (4500, 1500)): [95, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96], ((750, 500), (750, 1500)): [206, 216, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215], ((1500, 1500), (1750, 1500)): [89, 90, 93, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95], ((3000, 1500), (3000, 500)): [346, 346, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345], ((3250, 500), (3000, 500)): [113, 112, 109, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107], ((1750, 500), (2000, 500)): [229, 229, 229, 229, 229, 229, 229, 229, 229], ((4500, 1500), (4250, 1500)): [167, 167, 167, 167, 167, 167, 167, 167, 167], ((3750, 1500), (4000, 1500)): [229, 229, 229, 229, 229, 229, 229, 229, 229], ((4000, 1500), (4250, 1500)): [127, 105, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109], ((3500, 500), (3750, 500)): [83, 100, 90, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104], ((4500, 500), (4500, 1500)): [346, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345], ((1250, 500), (1000, 500)): [113, 111, 109, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107], ((3250, 1500), (3250, 500)): [195, 207, 208, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209], ((1000, 500), (750, 500)): [230, 230, 230, 230, 230, 230, 230, 230], ((4750, 500), (4750, 1500)): [274, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259, 259, 259, 259, 259, 259, 259, 276, 259, 259], ((3500, 500), (3250, 500)): [229, 229, 229, 229, 229, 229, 229, 229, 229], ((500, 500), (750, 500)): [92, 92, 99, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 96, 96, 96, 96, 96, 96], ((750, 1500), (750, 500)): [350, 344, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345], ((2250, 500), (2000, 500)): [107, 109, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109, 108, 89, 107, 109, 108, 107, 109, 108, 107, 109], ((1250, 1500), (1250, 500)): [199, 207, 208, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209], ((750, 500), (500, 500)): [96, 92, 94, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93, 93, 93, 90, 93, 93, 93, 93, 93], ((3500, 1500), (3500, 500)): [217, 214, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213], ((2250, 500), (2250, 1500)): [342, 341, 343, 343, 343, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345], ((500, 500), (500, 1500)): [258, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259, 259, 259, 258, 259, 259, 258, 259], ((2000, 500), (2250, 500)): [89, 89, 94, 95, 93, 92, 92, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91], ((2250, 1500), (2500, 1500)): [230, 230, 230, 230, 230, 230, 230, 230, 230], ((2750, 500), (2500, 500)): [101, 94, 95, 94, 90, 93, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 93], ((4000, 1500), (4000, 500)): [347, 347, 346, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345], ((4500, 500), (4250, 500)): [149, 149, 149, 149, 149, 149, 149, 149, 149], ((1500, 500), (1250, 500)): [229, 229, 229, 229, 229, 229, 229, 229], ((2750, 500), (3000, 500)): [229, 229, 229, 229, 229, 229, 229, 229, 229], ((1500, 500), (1750, 500)): [107, 90, 99, 103, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104, 104, 104, 104], ((3000, 1500), (3250, 1500)): [89, 104, 89, 108, 108, 107, 109, 108, 107, 109, 108, 107, 89, 109, 108, 107, 109, 108, 107, 109, 108, 107, 89, 109, 108, 107, 109, 108, 107, 109, 108, 107, 89, 109, 108, 107, 109, 108, 107, 109, 108, 107, 89, 109, 108, 107, 109, 108, 107, 109, 108, 107, 89, 109, 108, 107, 109, 108, 107, 109, 108, 107, 89, 109, 108, 107, 109, 108, 107, 109, 108, 107, 89, 109, 108, 107, 109, 108, 107, 109, 108, 107, 89, 109, 108, 107, 109], ((1000, 500), (1000, 1500)): [213, 210, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209, 209, 208, 209], ((3500, 1500), (3250, 1500)): [229, 229, 229, 229, 229, 229, 229, 229, 229], ((1250, 500), (1250, 1500)): [343, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345], ((1750, 500), (1500, 500)): [104, 94, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 90, 94, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 90, 93, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93, 90, 95, 94, 93, 95, 94, 93], ((2500, 1500), (2250, 1500)): [229, 229, 229, 229, 229, 229, 229, 229], ((1250, 1500), (1000, 1500)): [90, 90, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 91, 91]}
#   shipInitialStates = [ 
#   # 3 ships that start patrolling
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0),
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0), 
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0), 
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0), 
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0), 
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0), 
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0), 
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0), 
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0), 
#   state.ShipExternalState(x=0, y=0, orientation=0, speed=0, angularSpeed=0), 
#   ]
#   # define roles for ships - must have the same length as shipInitialStates
#   roles = [
#   'originalPatroller',
#   'originalPatroller',
#   'originalPatroller',
#   'originalPatroller',
#   'originalPatroller',
#   'originalPatroller',
#   'originalPatroller',
#   'originalPatroller',
#   'originalPatroller',
#   'originalPatroller',
#   ]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



